LIFO:
	Stacks use Last In First Out ordering
Stack operations:
	pop(): remove the top item
	push(item): Add an item to the top of the stack
	peek():	Return the top of the stack
	isEmpty(): return true if and only if the stack is empty
Access:
	stacks do not offer constant-time access to the ith item
	stacks do allow constant-time adds and removes
Recursion:
	Stacks are often useful in certain recursive algorithms. Sometimes you need to push temporary data
	onto the stack as you recurse, but then remove them as you backtrack (for example, because the 
	recursive check failed). Stacks offer an intuitive way to do this. A stack can also be used to
	implement a recursive algorithm iteratively.
FIFO:
	Queues use First In First Out ordering
Queue operations:
	add(item): add an item to the end of the list
	remove(): remove the first item in the list
	peek(): return the top of the queue
	isEmpty(): eturn true if and only if the queue is empty
Breadth-first search:
	Queues are often used with breadth-first search. In breadth-first search, we use a queue to store
	a list of the nodes that we need to process. Each time we process a node, we add its adjacent nodes
	to the back of the queue. This allows us to process nodes in the order in which they are viewed.